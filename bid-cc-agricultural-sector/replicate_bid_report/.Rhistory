eval(parse(text = paste('Map_LatinAmerica <- shapefile("', path.root, '/03-Map_LatinAmerica/Latino_America.shp")', sep = '')))
Map_LatinAmerica1 <- fortify(Map_LatinAmerica)
xlim.c = c(-116, -35)
ylim.c = c(-54, 32)
cex.c = 0.5
models = read.table(paste(path.root, '/_documentos/ModelosGCM.csv', sep = ''), header = T, sep = ',', stringsAsFactors = F)
models = rbind(models, 'Historical baseline', 'Future multi-GCM average')
p = dim(models)[1]
colnames(models) = 'Models'  #hack for now (machetazo)
yld_riego = array(NA, dim = c(dim(crop_riego)[1], 30, (p-1), length(variedades)))
for(v in 1:length(variedades)){
for(m in 1:10){ # fija indices de modelos para incluir
# print(m)
# Load & extract baseline data from list
if(m <= 9){
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/future/final/SOY_rainfed_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/future/final/', toupper(crops[i]), '_rainfed_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
}
} else {
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/', carp.res.secano, '/SOY_rainfed_', variedades[v], '_WFD.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/', carp.res.secano, '/', toupper(crops[i]), '_rainfed_', variedades[v], '_WFD.Rdat', sep = ''))
}
}
Run.secano = Run
if(m <= 9){
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/future/final/SOY_irrigation_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/future/final/', toupper(crops[i]), '_irrigation_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
}
} else {
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/', carp.res.riego, '/SOY_irrigation_', variedades[v], '_WFD.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/', carp.res.riego, '/', toupper(crops[i]), '_irrigation_', variedades[v], '_WFD.Rdat', sep = ''))
}
}
Run.riego = Run
# Unlist everything into matrices
secano = array(NA, dim = c(length(Run.secano), 30)) # Initialize arrays
for(j in 1:length(Run.secano)){
if(is.null(dim(Run.secano[[j]]))){
secano[j,] = 0
} else {
if(m == 10){
ind.s = as.numeric(substr(Run.secano[[j]][,1], 1, 4)) - 1970
}  else {
ind.s = as.numeric(substr(Run.secano[[j]][,1], 1, 4)) - 2020
}
if(ind.s[1] == 0){ind.s = ind.s +1}
secano[j, ind.s] = Run.secano[[j]][,'HWAH']
}
}
riego = array(NA, dim = c(length(Run.riego), 30))
for(j in 1:length(Run.riego)){
if(is.null(dim(Run.riego[[j]]))){
riego[j,] = 0
} else {
if(m == 10){
ind.r = as.numeric(substr(Run.riego[[j]][,1], 1, 4)) - 1970
} else {
ind.r = as.numeric(substr(Run.riego[[j]][,1], 1, 4)) - 2020
}
if(ind.r[1] == 0){ind.r = ind.r + 1}
riego[j, ind.r] = Run.riego[[j]][,'HWAH']
}
}
# place results in array
yld_secano[,,m,v] = secano
yld_riego[,,m,v] = riego
}
}
yld_secano = array(NA, dim = c(dim(crop_secano)[1], 30, (p-1), length(variedades)))  #pixels x years x models x varieties
yld_riego = array(NA, dim = c(dim(crop_riego)[1], 30, (p-1), length(variedades)))
for(v in 1:length(variedades)){
for(m in 1:10){ # fija indices de modelos para incluir
# print(m)
# Load & extract baseline data from list
if(m <= 9){
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/future/final/SOY_rainfed_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/future/final/', toupper(crops[i]), '_rainfed_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
}
} else {
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/', carp.res.secano, '/SOY_rainfed_', variedades[v], '_WFD.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/', carp.res.secano, '/', toupper(crops[i]), '_rainfed_', variedades[v], '_WFD.Rdat', sep = ''))
}
}
Run.secano = Run
if(m <= 9){
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/future/final/SOY_irrigation_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/future/final/', toupper(crops[i]), '_irrigation_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
}
} else {
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/', carp.res.riego, '/SOY_irrigation_', variedades[v], '_WFD.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/', carp.res.riego, '/', toupper(crops[i]), '_irrigation_', variedades[v], '_WFD.Rdat', sep = ''))
}
}
Run.riego = Run
# Unlist everything into matrices
secano = array(NA, dim = c(length(Run.secano), 30)) # Initialize arrays
for(j in 1:length(Run.secano)){
if(is.null(dim(Run.secano[[j]]))){
secano[j,] = 0
} else {
if(m == 10){
ind.s = as.numeric(substr(Run.secano[[j]][,1], 1, 4)) - 1970
}  else {
ind.s = as.numeric(substr(Run.secano[[j]][,1], 1, 4)) - 2020
}
if(ind.s[1] == 0){ind.s = ind.s +1}
secano[j, ind.s] = Run.secano[[j]][,'HWAH']
}
}
riego = array(NA, dim = c(length(Run.riego), 30))
for(j in 1:length(Run.riego)){
if(is.null(dim(Run.riego[[j]]))){
riego[j,] = 0
} else {
if(m == 10){
ind.r = as.numeric(substr(Run.riego[[j]][,1], 1, 4)) - 1970
} else {
ind.r = as.numeric(substr(Run.riego[[j]][,1], 1, 4)) - 2020
}
if(ind.r[1] == 0){ind.r = ind.r + 1}
riego[j, ind.r] = Run.riego[[j]][,'HWAH']
}
}
# place results in array
yld_secano[,,m,v] = secano
yld_riego[,,m,v] = riego
}
}
dim(yld_secano)
dim(yld_riego)
library(tidyverse)
devtools::install_github("flovv/RoogleVision")
library(RoogleVision)
library(jsonlite)
library(EBImage)
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
library(EBImage)
library(leaflet)
g <- gc(); rm(list = ls())
# R options
options(warn = -1); options(scipen = 999); OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Windows"){
setwd("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/22-Redo-BID-report")
} else {
if(OSys == "Linux"){
setwd("/mnt/workspace_cluster_3/bid-cc-agricultural-sector/22-Redo-BID-report")
}
}
# Load libraries
suppressMessages(library(Hmisc))
suppressMessages(library(raster))
suppressMessages(library(ggplot2))
suppressMessages(library(reshape))
suppressMessages(library(RColorBrewer))
# Escoger parametros de interes
params <- c('HWAH','H.AM','IRCM','CWAM','TMAXA','TMINA')
crops <- c('Maize', 'Rice', 'Soybean', 'Bean', 'Wheat')
i = 1
cat(paste("\n\n========= Processing ", crops[i], " =========\n", sep = ""))
if(crops[i] == "Maize"){variedades <- c("H6", "FM6", "MCCURDY6714")}
if(crops[i] == "Rice"){variedades <- c("IR8", "IR72", "IR64")}
if(crops[i] == "Soybean"){variedades <- c("Hutcheson", "DONMARIO")}
if(crops[i] == "Bean"){variedades <- c("ICTAOstua", "Carioca", "A193", "BAT881", "Manitou", "Perola", "BRSRadiante")}
if(crops[i] == "Wheat"){variedades <- c("Seri82BA", "TajanBA", "DonErnestoBA", "Gerek79BA", "HalconsnaBA", "BrigadierBA")}
if(OSys == "Windows"){
path.res = "//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/19-BID-reanalysis" # Results directory
path.root = "//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector" # Root path
} else {
if(OSys == "Linux"){
path.res = "/mnt/workspace_cluster_3/bid-cc-agricultural-sector/19-BID-reanalysis" # Results directory
path.root = "/mnt/workspace_cluster_3/bid-cc-agricultural-sector" # Root path
}
}
carp.res.riego = "historical/final"
carp.res.secano = "historical/final"
regions = c('MEX', 'CEN', 'AND', 'BRA', 'SUR')
treat = c('riego', 'secano') # riego o secano (which to plot)
treat.en = c('Irrigated', 'Rainfed')
cultivos = c('maiz', 'arroz', 'soya', 'frijol', 'trigo')
cultivos.en = c('Maize', 'Rice', 'Soybean', 'Bean', 'Wheat')
anos = 1:28 # Fijar year para analizar aqui
anos2 = 1971:1998
eval(parse(text = paste('load("', path.root, '/08-Cells_toRun/matrices_cultivo/version2017/', cultivos.en[i], '_riego.Rdat")', sep = '')))  #08-Cells_toRun/
eval(parse(text = paste('load("', path.root, '/08-Cells_toRun/matrices_cultivo/version2017/', cultivos.en[i], '_secano.Rdat")', sep = '')))
eval(parse(text = paste('Map_LatinAmerica <- shapefile("', path.root, '/03-Map_LatinAmerica/Latino_America.shp")', sep = '')))
Map_LatinAmerica1 <- fortify(Map_LatinAmerica)
xlim.c = c(-116, -35)
ylim.c = c(-54, 32)
cex.c = 0.5
models = read.table(paste(path.root, '/_documentos/ModelosGCM.csv', sep = ''), header = T, sep = ',', stringsAsFactors = F)
models = rbind(models, 'Historical baseline', 'Future multi-GCM average')
p = dim(models)[1]
colnames(models) = 'Models'  #hack for now (machetazo)
yld_secano = array(NA, dim = c(dim(crop_secano)[1], 30, (p-1), length(variedades)))  #pixels x years x models x varieties
yld_riego = array(NA, dim = c(dim(crop_riego)[1], 30, (p-1), length(variedades)))
for(v in 1:length(variedades)){
for(m in 1:10){ # fija indices de modelos para incluir
# print(m)
# Load & extract baseline data from list
if(m <= 9){
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/future/final/SOY_rainfed_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/future/final/', toupper(crops[i]), '_rainfed_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
}
} else {
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/', carp.res.secano, '/SOY_rainfed_', variedades[v], '_WFD.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/', carp.res.secano, '/', toupper(crops[i]), '_rainfed_', variedades[v], '_WFD.Rdat', sep = ''))
}
}
Run.secano = Run
if(m <= 9){
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/future/final/SOY_irrigation_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/future/final/', toupper(crops[i]), '_irrigation_', variedades[v], '_', models[m,], '.Rdat', sep = ''))
}
} else {
if(crops[i] == "Soybean"){
load(paste(path.res, '/', crops[i], '/', carp.res.riego, '/SOY_irrigation_', variedades[v], '_WFD.Rdat', sep = ''))
} else {
load(paste(path.res, '/', crops[i], '/', carp.res.riego, '/', toupper(crops[i]), '_irrigation_', variedades[v], '_WFD.Rdat', sep = ''))
}
}
Run.riego = Run
# Unlist everything into matrices
secano = array(NA, dim = c(length(Run.secano), 30)) # Initialize arrays
for(j in 1:length(Run.secano)){
if(is.null(dim(Run.secano[[j]]))){
secano[j,] = 0
} else {
if(m == 10){
ind.s = as.numeric(substr(Run.secano[[j]][,1], 1, 4)) - 1970
}  else {
ind.s = as.numeric(substr(Run.secano[[j]][,1], 1, 4)) - 2020
}
if(ind.s[1] == 0){ind.s = ind.s +1}
secano[j, ind.s] = Run.secano[[j]][,'HWAH']
}
}
riego = array(NA, dim = c(length(Run.riego), 30))
for(j in 1:length(Run.riego)){
if(is.null(dim(Run.riego[[j]]))){
riego[j,] = 0
} else {
if(m == 10){
ind.r = as.numeric(substr(Run.riego[[j]][,1], 1, 4)) - 1970
} else {
ind.r = as.numeric(substr(Run.riego[[j]][,1], 1, 4)) - 2020
}
if(ind.r[1] == 0){ind.r = ind.r + 1}
riego[j, ind.r] = Run.riego[[j]][,'HWAH']
}
}
# place results in array
yld_secano[,,m,v] = secano
yld_riego[,,m,v] = riego
}
}
yld_secano
yld_riego
yld_secano = yld_secano[,anos,,] # Incluir los indices de los years "buenos" aqui con datos por todos los pixeles
yld_riego = yld_riego[,anos,,]
yld_secano[yld_secano == -99] = 0 # Re-emplazar -99 con 0 for legitimate crop failures
yld_riego[yld_riego == -99] = 0
wfd.r = apply(yld_riego[,,(p-1),], c(1, 3), mean, na.rm = T) # multi-annual means
wfd.s = apply(yld_secano[,,(p-1),], c(1, 3), mean, na.rm = T)
thresh = mean(yld_secano[,,(p-1),], na.rm = T) * 0.2 # define crop failure as 20% of mean rainfed yield
wfd.fail.r = apply(yld_riego[,,(p-1),], c(1, 3), function(x) sum(x < thresh, na.rm = T)) # multi-annual means
wfd.fail.s = apply(yld_secano[,,(p-1),], c(1, 3), function(x) sum(x < thresh,na.rm = T))
wfd.r.high = apply(wfd.r, 1, which.max)
wfd.s.high = apply(wfd.s, 1, which.max)
wfd.r.lowFail = apply(wfd.fail.r, 1, which.min)
wfd.s.lowFail = apply(wfd.fail.s, 1, which.min)
if(crops[i] %in% c("Maize", "Rice")){
wfd.s.best = mat.or.vec(dim(wfd.s)[1], 1)
for (j in 1:dim(wfd.s)[1])  {
sortYield = sort.list(wfd.s[j,], dec = T)
if (wfd.fail.s[j,sortYield[1]] <= 4) {wfd.s.best[j] = sortYield[1]}  else{
if (wfd.fail.s[j,sortYield[2]] <= 4) {wfd.s.best[j] = sortYield[2]}  else{
if (wfd.fail.s[j,sortYield[3]] <= 4) {wfd.s.best[j] = sortYield[3]}  else{
wfd.s.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
}
wfd.r.best = mat.or.vec(dim(wfd.r)[1], 1)
for (j in 1:dim(wfd.r)[1])  {
sortYield = sort.list(wfd.r[j,], dec = T)
if (wfd.fail.r[j,sortYield[1]] <= 4) {wfd.r.best[j] = sortYield[1]}  else{
if (wfd.fail.r[j,sortYield[2]] <= 4) {wfd.r.best[j] = sortYield[2]}  else{
if (wfd.fail.r[j,sortYield[3]] <= 4) {wfd.r.best[j] = sortYield[3]}  else{
wfd.r.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
}
} else {
if(crops[i] == "Soybean"){
wfd.s.best = mat.or.vec(dim(wfd.s)[1], 1)
for (j in 1:dim(wfd.s)[1])  {
sortYield = sort.list(wfd.s[j,], dec = T)
if (wfd.fail.s[j,sortYield[1]] <= 4) {wfd.s.best[j] = sortYield[1]}  else{
if (wfd.fail.s[j,sortYield[2]] <= 4) {wfd.s.best[j] = sortYield[2]}  else{
wfd.s.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
wfd.r.best = mat.or.vec(dim(wfd.r)[1], 1)
for (j in 1:dim(wfd.r)[1])  {
sortYield = sort.list(wfd.r[j,], dec = T)
if (wfd.fail.r[j,sortYield[1]] <= 4) {wfd.r.best[j] = sortYield[1]}  else{
if (wfd.fail.r[j,sortYield[2]] <= 4) {wfd.r.best[j] = sortYield[2]}  else{
wfd.r.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
} else {
if(crops[i] == "Bean"){
wfd.s.best = mat.or.vec(dim(wfd.s)[1], 1)
for (j in 1:dim(wfd.s)[1])  {
sortYield = sort.list(wfd.s[j,], dec = T)
if (wfd.fail.s[j,sortYield[1]] <= 4) {wfd.s.best[j] = sortYield[1]}  else{
if (wfd.fail.s[j,sortYield[2]] <= 4) {wfd.s.best[j] = sortYield[2]}  else{
if (wfd.fail.s[j,sortYield[3]] <= 4) {wfd.s.best[j] = sortYield[3]}  else{
if (wfd.fail.s[j,sortYield[4]] <= 4) {wfd.s.best[j] = sortYield[4]} else{
if (wfd.fail.s[j,sortYield[5]] <= 4) {wfd.s.best[j] = sortYield[5]} else{
if (wfd.fail.s[j,sortYield[6]] <= 4) {wfd.s.best[j] = sortYield[6]} else{
if (wfd.fail.s[j,sortYield[7]] <= 4) {wfd.s.best[j] = sortYield[7]} else{
wfd.s.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
}
}
}
}
}
wfd.r.best = mat.or.vec(dim(wfd.r)[1], 1)
for (j in 1:dim(wfd.r)[1])  {
sortYield = sort.list(wfd.r[j,], dec = T)
if (wfd.fail.r[j,sortYield[1]] <= 4) {wfd.r.best[j] = sortYield[1]}  else{
if (wfd.fail.r[j,sortYield[2]] <= 4) {wfd.r.best[j] = sortYield[2]}  else{
if (wfd.fail.r[j,sortYield[3]] <= 4) {wfd.r.best[j] = sortYield[3]}  else{
if (wfd.fail.r[j,sortYield[4]] <= 4) {wfd.r.best[j] = sortYield[4]} else{
if (wfd.fail.r[j,sortYield[5]] <= 4) {wfd.r.best[j] = sortYield[5]} else{
if (wfd.fail.r[j,sortYield[6]] <= 4) {wfd.r.best[j] = sortYield[6]} else{
if (wfd.fail.r[j,sortYield[7]] <= 4) {wfd.r.best[j] = sortYield[7]} else{
wfd.r.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
}
}
}
}
}
} else {
if(crops[i] == "Wheat"){
wfd.s.best = mat.or.vec(dim(wfd.s)[1], 1)
for (j in 1:dim(wfd.s)[1])  {
sortYield = sort.list(wfd.s[j,], dec = T)
if (wfd.fail.s[j,sortYield[1]] <= 4) {wfd.s.best[j] = sortYield[1]}  else{
if (wfd.fail.s[j,sortYield[2]] <= 4) {wfd.s.best[j] = sortYield[2]}  else{
if (wfd.fail.s[j,sortYield[3]] <= 4) {wfd.s.best[j] = sortYield[3]}  else{
if (wfd.fail.s[j,sortYield[4]] <= 4) {wfd.s.best[j] = sortYield[4]} else{
if (wfd.fail.s[j,sortYield[5]] <= 4) {wfd.s.best[j] = sortYield[5]} else{
if (wfd.fail.s[j,sortYield[6]] <= 4) {wfd.s.best[j] = sortYield[6]} else{
wfd.s.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
}
}
}
}
wfd.r.best = mat.or.vec(dim(wfd.r)[1], 1)
for (j in 1:dim(wfd.r)[1])  {
sortYield = sort.list(wfd.r[j,], dec = T)
if (wfd.fail.r[j,sortYield[1]] <= 4) {wfd.r.best[j] = sortYield[1]}  else{
if (wfd.fail.r[j,sortYield[2]] <= 4) {wfd.r.best[j] = sortYield[2]}  else{
if (wfd.fail.r[j,sortYield[3]] <= 4) {wfd.r.best[j] = sortYield[3]}  else{
if (wfd.fail.r[j,sortYield[4]] <= 4) {wfd.r.best[j] = sortYield[4]} else{
if (wfd.fail.r[j,sortYield[5]] <= 4) {wfd.r.best[j] = sortYield[5]} else{
if (wfd.fail.r[j,sortYield[6]] <= 4) {wfd.r.best[j] = sortYield[6]} else{
wfd.r.best[j] = sortYield[1]  #if all varieties have more than 4 crop failures, use highest-yielding
}
}
}
}
}
}
}
}
}
}
}
if(crops[i] == 'Bean'){ # check highest yielding by country according to growth habit
habit = read.table(paste0(path.root, '/_documentos/Bean_growthHabit.csv'), header = T, sep = ',')
for(t in 1:2){
eval(parse(text = paste("meso = match(crop_", treat[t], "$country, habit$X[habit$Mesoamerican == 1])", sep = "")))
ind.meso = which(is.na(meso) == F)
ind.andean = which(is.na(meso))
eval(parse(text = paste("meso.high = apply(wfd.", substr(treat[t], 1, 1), "[ind.meso, 1:2], 1, which.max)", sep = "")))
eval(parse(text = paste("andean.high = apply(wfd.", substr(treat[t], 1, 1), "[ind.andean, 3:4], 1, which.max)+2", sep = "")))
eval(parse(text = paste("wfd.", substr(treat[t], 1, 1), ".best[ind.meso] = meso.high", sep = "")))
eval(parse(text = paste("wfd.", substr(treat[t], 1, 1), ".best[ind.andean] = andean.high", sep = "")))
}
}
yld_secano.2 <- yld_secano # make backup with varieties
yld_riego.2 <- yld_riego
yld_secano <- array(NA, dim = c(dim(crop_secano)[1], length(anos), (p-1), length(params))) # pixels x years x models x params
yld_riego <- array(NA, dim = c(dim(crop_riego)[1], length(anos), (p-1), length(params)))
for(k in 1:length(variedades)){
yld_secano[wfd.s.best==k,,,] = yld_secano.2[wfd.s.best==k,,k,] # yld_secano[wfd.s.best==k,,,] = yld_secano.2[wfd.s.best==k,,,k,]
yld_riego[wfd.r.best==k,,,] = yld_riego.2[wfd.r.best==k,,k,] # yld_riego[wfd.r.best==k,,,] = yld_riego.2[wfd.r.best==k,,,k,]
}
riego.fallas <- apply(yld_riego[,,,1], c(1, 3), function(x) sum(is.na(x) | x == 0))
secano.fallas <- apply(yld_secano[,,,1], c(1, 3), function(x) sum(is.na(x) | x == 0))
ind.bad.r <- which(riego.fallas[,10] >= 14)  #half of total years
ind.bad.s <- which(secano.fallas[,10] >= 14)
if(length(ind.bad.r) > 0){
yld_riego   <- yld_riego[-ind.bad.r,,,]
crop_riego2 <- crop_riego  #make backup of original
crop_riego  <- crop_riego[-ind.bad.r,]
}
if(length(ind.bad.s) > 0){
yld_secano <- yld_secano[-ind.bad.s,,,]
crop_secano2 <- crop_secano  #make backup of original
crop_secano <- crop_secano[-ind.bad.s,]
}
test <- apply(yld_riego[,,10,3], 1, mean, na.rm = T)  #check multi-annual mean in baseline period of irrigation applied
ind.rain <- which(test == 0)
length(ind.rain)/dim(yld_riego)[1]*100  #check % of pixels, shouldn't be too high
if(length(ind.rain) > 0){
yld_riego <- yld_riego[-ind.rain,,,]
crop_riego <- crop_riego[-ind.rain,]
}
for(m in 1:10){
ind.fail.s = which(yld_secano[,,m,1] == 0 | is.na(yld_secano[,,m,1]), arr.ind = T) # Indices of crop failures for a given model
ind.fail.r = which(yld_riego[,,m,1] == 0 | is.na(yld_riego[,,m,1]), arr.ind = T)
if(length(ind.fail.s) > 0){
for(v in 2:length(params)){
test <- yld_secano[,,m,v] # pull out matrix
test[ind.fail.s] <- NA # reset values
yld_secano[,,m,v] <- test # put it back
}
}
if(length(ind.fail.r) > 0){
for(v in 2:length(params)){
test <- yld_riego[,,m,v] # pull out matrix
test[ind.fail.r] <- NA # reset values
yld_riego[,,m,v] <- test # put it back
}
}
}
yld_riego
yld_secano
p
wfd.r1 = yld_riego[,,(p-1),1]
wfd.r1
dim(wfd.r1)
dim(yld_riego)
yld_riego[,,10,1]
head(yld_riego[,,10,1])
head(yld_riego[,,10,2])
wfd.r1 = yld_riego[,,(p-1),1]
wfd.r1[wfd.r1 == 0] = NA # reset 0's to NA
wfd.r1 = apply(wfd.r1, 1, mean, na.rm = T) # yield
wfd.r1
hist(wfd.r1)
wfd.s1 = yld_secano[,,(p-1),1]
wfd.s1[wfd.s1 == 0] = NA
wfd.s1 = apply(wfd.s1, 1, mean, na.rm = T) # yield
wfd.s1
hist(wfd.s1)
(p-2)
head(wfd.r1)
head(apply(yld_riego[,,10,1], 1, mean, na.rm = T))
head(apply(yld_riego[,,10,2], 1, mean, na.rm = T))
head(apply(yld_riego[,,10,3], 1, mean, na.rm = T))
head(apply(yld_riego[,,10,4], 1, mean, na.rm = T))
head(apply(yld_riego[,,10,5], 1, mean, na.rm = T))
head(apply(yld_riego[,,10,6], 1, mean, na.rm = T))
head(apply(yld_riego[,,10,7], 1, mean, na.rm = T))
mean(c(10800.929, 12244.821, 13633.250, 10800.929, 12244.821, 13633.250))
wfd.s.best
1:(p-2)
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/01-climate-data/bc_0_5deg_lat/cccma_canesm2/1971_2000/bc_prec_1950_2000_cells_1_1000.Rdat")
gcmHistBC[1:5, 1:5]
gcmHistBC %>% dim()
dim(gcmHistBC)
gcmHistBC[1:5, 1:20]
