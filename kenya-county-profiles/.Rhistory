soil <- soil[,c("cellID","lon.x","lat.x","id_coarse","rdepth","d.25","d.100","d.225","d.450","d.800","d.1500","soilcp")]
names(soil)[2:3] <- c('lon','lat')
cat('Loading: Maximum temperature for first wet season\n')
### =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ###
if(season == 'first'){
load(paste(countyDir, '/tmax/tmax_fs_wet_days.RData', sep=''))
tmax <- first_season_var; rm(first_season_var)
} else {
if(season == 'second'){
load(paste(countyDir, '/tmax/tmax_ss_wet_days.RData', sep=''))
tmax <- second_season_var; rm(second_season_var)
}
}
tmax <- tmax[years_analysis]
tmax <- lapply(1:length(tmax), function(i){z <- as.data.frame(tmax[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(tmax)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(tmax) <- years_analysis
tmax <- reshape::merge_recurse(tmax)
cat('Loading: Minimum temperature for first wet season\n')
### =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ###
if(season == 'first'){
load(paste(countyDir, '/tmin/tmin_fs_wet_days.RData', sep=''))
tmin <- first_season_var; rm(first_season_var)
} else {
if(season == 'second'){
load(paste(countyDir, '/tmin/tmin_ss_wet_days.RData', sep=''))
tmin <- second_season_var; rm(second_season_var)
}
}
tmin <- tmin[years_analysis]
tmin <- lapply(1:length(tmin), function(i){z <- as.data.frame(tmin[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(tmin)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(tmin) <- years_analysis
tmin <- reshape::merge_recurse(tmin)
cat('Calculate: Mean temperature for first wet season\n')
suppressMessages(library(parallel))
suppressMessages(library(parallel))
tmean <- mclapply(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
tmaxYears <- year(colnames(tmax)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])), x=tmaxYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID'])))
# cat('Define cells to analyse\n')
pixelList <- Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID']))
tmean <- tmeanCMP(TMAX=tmax[match(pixelList, tmax[,'cellID']), datesID+3],
TMIN=tmin[match(pixelList, tmin[,'cellID']), datesID+3],
season_ini=1, season_end=100)
tmean <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), tmean)
colnames(tmean) <- c('cellID', 'lon', 'lat', paste('d', 1:100, sep=''))
return(tmean)
}, mc.cores = 3)
names(tmean) <- years_analysis
cat('Calculate: Mean temperature for first wet season\n')
### =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ###
suppressMessages(library(parallel))
tmean <- mclapply(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
tmaxYears <- year(colnames(tmax)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])), x=tmaxYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID'])))
# cat('Define cells to analyse\n')
pixelList <- Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID']))
tmean <- tmeanCMP(TMAX=tmax[match(pixelList, tmax[,'cellID']), datesID+3],
TMIN=tmin[match(pixelList, tmin[,'cellID']), datesID+3],
season_ini=1, season_end=100)
tmean <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), tmean)
colnames(tmean) <- c('cellID', 'lon', 'lat', paste('d', 1:100, sep=''))
return(tmean)
}, mc.cores = 1)
mclapply2 <- function(...) {
## Create a cluster
size.of.list <- length(list(...)[[1]])
cl <- makeCluster( min(size.of.list, 3) )
## Find out the names of the loaded packages
loaded.package.names <- c(
## Base packages
sessionInfo()$basePkgs,
## Additional packages
names( sessionInfo()$otherPkgs ))
tryCatch( {
## Copy over all of the objects within scope to
## all clusters.
this.env <- environment()
while( identical( this.env, globalenv() ) == FALSE ) {
clusterExport(cl,
ls(all.names=TRUE, env=this.env),
envir=this.env)
this.env <- parent.env(environment())
}
clusterExport(cl,
ls(all.names=TRUE, env=globalenv()),
envir=globalenv())
## Load the libraries on all the clusters
## N.B. length(cl) returns the number of clusters
parLapply( cl, 1:length(cl), function(xx){
lapply(loaded.package.names, function(yy) {
require(yy , character.only=TRUE)})
})
## Run the lapply in parallel
return( parLapply( cl, ...) )
}, finally = {
## Stop the cluster
stopCluster(cl)
})
}
suppressMessages(library(parallel))
tmean <- mclapply2(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
tmaxYears <- year(colnames(tmax)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])), x=tmaxYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID'])))
# cat('Define cells to analyse\n')
pixelList <- Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID']))
tmean <- tmeanCMP(TMAX=tmax[match(pixelList, tmax[,'cellID']), datesID+3],
TMIN=tmin[match(pixelList, tmin[,'cellID']), datesID+3],
season_ini=1, season_end=100)
tmean <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), tmean)
colnames(tmean) <- c('cellID', 'lon', 'lat', paste('d', 1:100, sep=''))
return(tmean)
}, mc.cores = 3)
names(tmean) <- years_analysis
years_analysis
suppressMessages(library(lubridate))
suppressMessages(library(parallel))
tmean <- mclapply2(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
tmaxYears <- year(colnames(tmax)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])), x=tmaxYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID'])))
# cat('Define cells to analyse\n')
pixelList <- Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID']))
tmean <- tmeanCMP(TMAX=tmax[match(pixelList, tmax[,'cellID']), datesID+3],
TMIN=tmin[match(pixelList, tmin[,'cellID']), datesID+3],
season_ini=1, season_end=100)
tmean <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), tmean)
colnames(tmean) <- c('cellID', 'lon', 'lat', paste('d', 1:100, sep=''))
return(tmean)
}, mc.cores = 3)
suppressMessages(library(parallel))
tmean <- mclapply2(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
tmaxYears <- year(colnames(tmax)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])), x=tmaxYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID'])))
# cat('Define cells to analyse\n')
pixelList <- Reduce(intersect, list(tmax[,'cellID'], tmin[,'cellID']))
tmean <- tmeanCMP(TMAX=tmax[match(pixelList, tmax[,'cellID']), datesID+3],
TMIN=tmin[match(pixelList, tmin[,'cellID']), datesID+3],
season_ini=1, season_end=100)
tmean <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), tmean)
colnames(tmean) <- c('cellID', 'lon', 'lat', paste('d', 1:100, sep=''))
return(tmean)
})
names(tmean) <- years_analysis
cat('*** 1. Calculate mean daily temperature through list of years ***\n')
TMEAN <- lapply(1:length(years_analysis), function(j){
pixelList <- tmean[[j]][,'cellID']
tmean <- rowMeans(tmean[[j]][, 4:ncol(tmean[[j]])])
tmean <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), tmean)
colnames(tmean) <- c('cellID', 'lon', 'lat', as.character(gsub(pattern='y', replacement='', years_analysis[[j]])))
return(tmean)
})
names(TMEAN) <- years_analysis
TMEAN <- reshape::merge_recurse(TMEAN)
View(TMEAN)
library(tidyverse)
TMEAN %>% gather(Year, Value, -(cellID:lat))
tmeanTest <- TMEAN %>% gather(Year, Value, -(cellID:lat))
tmeanTest$Year <- tmeanTest$Year %>% as.character %>% as.numeric
tmeanTest %>% ggplot(aes(x = Year, y = Value, group = factor(cellID))) + geom_line()
tmeanTest %>%
ggplot(aes(x = Year, y = Value, group = factor(cellID))) +
geom_line(colour = factor(cellID))
tmeanTest %>%
ggplot(aes(x = Year, y = Value, group = factor(cellID), colour = factor(cellID))) +
geom_line()
tmeanTest %>%
ggplot(aes(x = Year, y = Value, group = factor(cellID), colour = factor(cellID))) +
geom_line() + theme(legend.position='none')
View(TMEAN)
cat('*** 2. Calculate crop duration with TB=10 ?C through list of years ***\n') # FIX
GDD_1 <- lapply(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
gdd_1 <- apply(X=tmean[[j]][,4:ncol(tmean[[j]])], MARGIN=1, FUN=calc_cdurCMP, t_thresh=10)
gdd_1 <- cbind(tmean[[j]][,1:3], gdd_1)
colnames(gdd_1)[4] <- as.character(gsub(pattern='y', replacement='', years_analysis[[j]]))
return(gdd_1)
})
names(GDD_1) <- years_analysis
GDD_1 <- reshape::merge_recurse(GDD_1)
GDD_1Test <- GDD_1 %>% gather(Year, Value, -(cellID:lat))
GDD_1Test$Year <- GDD_1Test$Year %>% as.character %>% as.numeric
GDD_1Test %>%
ggplot(aes(x = Year, y = Value, group = factor(cellID), colour = factor(cellID))) +
geom_line() + theme(legend.position='none')
cat('*** 3. Calculate crop duration with TB=25 ?C through list of years ***\n') # FIX
GDD_2 <- lapply(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
gdd_2 <- apply(X=tmean[[j]][,4:ncol(tmean[[j]])], MARGIN=1, FUN=calc_cdurCMP, t_thresh=25)
gdd_2 <- cbind(tmean[[j]][,1:3], gdd_2)
colnames(gdd_2)[4] <- as.character(gsub(pattern='y', replacement='', years_analysis[[j]]))
return(gdd_2)
})
names(GDD_2) <- years_analysis
GDD_2 <- reshape::merge_recurse(GDD_2)
cat('*** 4. Calculate total number of days with maximum temperature greater or equal to 35 ?C through list of years ***\n')
ND_t35 <- lapply(1:length(years_analysis), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
tmaxYears <- year(colnames(tmax)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])), x=tmaxYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(tmax[,'cellID'])
# cat('Define cells to analyse\n')
pixelList <- tmax[,'cellID']
nd_t35 <- apply(X=tmax[match(pixelList, tmax[,'cellID']), datesID+3], MARGIN=1, FUN=calc_htsCMP, t_thresh=35)
nd_t35 <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), nd_t35)
colnames(nd_t35) <- c('cellID', 'lon', 'lat', as.character(gsub(pattern='y', replacement='', years_analysis[[j]])))
return(nd_t35)
})
names(ND_t35) <- years_analysis
ND_t35 <- reshape::merge_recurse(ND_t35)
library(tidyverse)
ND_t35Test <- ND_t35 %>% gather(Year, Value, -(cellID:lat))
ND_t35Test$Year <- ND_t35Test$Year %>% as.character %>% as.numeric
ND_t35Test %>%
ggplot(aes(x = Year, y = Value, group = factor(cellID), colour = factor(cellID))) +
geom_line() + theme(legend.position='none')
cat('*** 5. Calculate total precipitation by season through list of years ***\n')
TOTRAIN <- lapply(1:length(years_prec), function(j){
suppressMessages(library(lubridate))
precYears <- year(colnames(prec)[-c(1:3)])
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_prec[[j]])), x=precYears, fixed=TRUE)
ncell <- length(prec[,'cellID'])
pixelList <- prec[,'cellID']
train <- apply(X=prec[match(pixelList, prec[,'cellID']), datesID+3], MARGIN=1, FUN=calc_totrainCMP)
train <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), train)
colnames(train) <- c('cellID', 'lon', 'lat', as.character(gsub(pattern='y', replacement='', years_prec[[j]])))
# train <- apply(X=prec[[j]][,4:ncol(prec[[j]])], MARGIN=1, FUN=calc_totrainCMP)
# train <- cbind(prec_all[[j]][,1:3], train)
# colnames(train)[4] <- as.character(gsub(pattern='y', replacement='', years_analysis[[j]]))
return(train)
})
names(TOTRAIN) <- years_prec
TOTRAIN <- reshape::merge_recurse(TOTRAIN)
cat('*** 6. Calculate maximum number of consecutive dry days through list of years ***\n')
CDD <- lapply(1:length(years_prec), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
precYears <- year(colnames(prec)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_prec[[j]])), x=precYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(prec[,'cellID'])
# cat('Define cells to analyse\n')
pixelList <- prec[,'cellID']
cons_days <- apply(X=prec[match(pixelList, prec[,'cellID']), datesID+3], MARGIN=1, FUN=dr_stressCMP, p_thresh=1)
cons_days <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), cons_days)
colnames(cons_days) <- c('cellID', 'lon', 'lat', as.character(gsub(pattern='y', replacement='', years_prec[[j]])))
return(cons_days)
})
names(CDD) <- years_prec
CDD <- reshape::merge_recurse(CDD)
cat('*** 7. Calculate maximum 5-day running average precipitation through list of years ***\n')
P5D <- lapply(1:length(years_prec), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
suppressMessages(library(lubridate))
precYears <- year(colnames(prec)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_prec[[j]])), x=precYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(prec[,'cellID'])
# cat('Define cells to analyse\n')
pixelList <- prec[,'cellID']
suppressMessages(library(caTools))
p5d <- apply(X=prec[match(pixelList, prec[,'cellID']), datesID+3], MARGIN=1, FUN=function(x){z <- caTools::runmean(x, k=5, endrule='NA'); z <- max(z, na.rm=TRUE); return(z)})
p5d <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), p5d)
colnames(p5d) <- c('cellID', 'lon', 'lat', as.character(gsub(pattern='y', replacement='', years_prec[[j]])))
return(p5d)
})
names(P5D) <- years_prec
P5D <- reshape::merge_recurse(P5D)
cat('*** 8. Calculate 95th percentile of daily precipitation through list of years ***\n')
P_95 <- lapply(1:length(years_prec), function(j){
# cat(' Processing year:', as.numeric(gsub(pattern='y', replacement='', years_analysis[[j]])),'\n')
library(lubridate)
precYears <- year(colnames(prec)[-c(1:3)])
# cat('Select 100-wet days by year\n')
datesID <- grep(pattern=as.numeric(gsub(pattern='y', replacement='', years_prec[[j]])), x=precYears, fixed=TRUE)
# cat('Define number of cells for final raster\n')
ncell <- length(prec[,'cellID'])
# cat('Define cells to analyse\n')
pixelList <- prec[,'cellID']
library(caTools)
p_95 <- apply(X=prec[match(pixelList, prec[,'cellID']), datesID+3], MARGIN=1, FUN=quantile, probs=.95, na.rm=TRUE)
p_95 <- cbind(pixelList, xyFromCell(object=countyMask, cell=pixelList), p_95)
colnames(p_95) <- c('cellID', 'lon', 'lat', as.character(gsub(pattern='y', replacement='', years_prec[[j]])))
return(p_95)
})
names(P_95) <- years_prec
P_95 <- reshape::merge_recurse(P_95)
cat('*** 9. Processing watbal_wrapper function for each cell\n')
cat('Loading: Solar radiation for first wet season\n')
load(paste(countyDir, '/dswrf/dswrf.RData', sep=''))
dswrfAll <- ch2014_year; rm(ch2014_year)
dswrfAll <- dswrfAll[years_analysis]
dswrfAll <- lapply(1:length(dswrfAll), function(i){z <- as.data.frame(dswrfAll[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(dswrfAll)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(dswrfAll) <- years_analysis
dswrfAll <- reshape::merge_recurse(dswrfAll)
cat('Loading: Daily precipitation for first wet season\n')
### =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ###
load(paste(countyDir, '/prec/prec.RData', sep=''))
precAll <- chirps_year; rm(chirps_year)
precAll <- precAll[years_analysis]
precAll <- lapply(1:length(precAll), function(i){z <- as.data.frame(precAll[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(precAll)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(precAll) <- years_analysis
precAll <- reshape::merge_recurse(precAll)
cat('Loading: Maximum temperature for first wet season\n')
### =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ###
load(paste(countyDir, '/tmax/tmax.RData', sep=''))
tmaxAll <- ch2014_year; rm(ch2014_year)
tmaxAll <- tmaxAll[years_analysis]
tmaxAll <- lapply(1:length(tmaxAll), function(i){z <- as.data.frame(tmaxAll[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(tmaxAll)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(tmaxAll) <- years_analysis
tmaxAll <- reshape::merge_recurse(tmaxAll)
cat('Loading: Minimum temperature for first wet season\n')
### =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ###
load(paste(countyDir, '/tmin/tmin.RData', sep=''))
tminAll <- ch2014_year; rm(ch2014_year)
tminAll <- tminAll[years_analysis]
tminAll <- lapply(1:length(tminAll), function(i){z <- as.data.frame(tminAll[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(tminAll)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(tminAll) <- years_analysis
tminAll <- reshape::merge_recurse(tminAll)
ncells <- length(Reduce(intersect, list(tmaxAll[,'cellID'], tminAll[,'cellID'], precAll[,'cellID'], dswrfAll[,'cellID'], soil[,'cellID'])))
pixelList <- Reduce(intersect, list(tmaxAll[,'cellID'], tminAll[,'cellID'], precAll[,'cellID'], dswrfAll[,'cellID'], soil[,'cellID']))
NDWSProcess <- function(j){ # By pixel
suppressMessages(library(lubridate))
# cat(' Processing pixel:', pixelList[j],'\n')
daysList <- Reduce(intersect, list(colnames(tmaxAll[,-c(1:3)]), colnames(tminAll[,-c(1:3)]),
colnames(precAll[,-c(1:3)]), colnames(dswrfAll[,-c(1:3)])))
out_all <- soil[which(soil$cellID==pixelList[j]), c('cellID', 'lon', 'lat')]
out_all <- do.call("rbind", replicate(length(daysList), out_all, simplify=FALSE))
out_all$SRAD <- as.numeric(dswrfAll[which(dswrfAll$cellID==pixelList[j]), match(daysList, colnames(dswrfAll))])
out_all$TMIN <- as.numeric(tminAll[which(tminAll$cellID==pixelList[j]), match(daysList, colnames(tminAll))])
out_all$TMAX <- as.numeric(tmaxAll[which(tmaxAll$cellID==pixelList[j]), match(daysList, colnames(tmaxAll))])
out_all$RAIN <- as.numeric(precAll[which(precAll$cellID==pixelList[j]), match(daysList, colnames(precAll))])
rownames(out_all) <- daysList
soilcp <- soil[which(soil$cellID==pixelList[j]), 'soilcp']
watbal_loc <- watbal_wrapper(out_all=out_all, soilcp=soilcp) # If we need more indexes are here
watbal_loc <- watbal_loc[,c('cellID', 'lon', 'lat', 'ERATIO')]
if(season=='first'){
load(paste(countyDir, '/indx_fs_wet_days.RData', sep=''))
} else {
if(season=='second'){
load(paste(countyDir, '/indx_ss_wet_days.RData', sep=''))
} else {
cat('Incorrect season, please verify.\n')
}
}
indexs_wet_days <- indexs_wet_days[years_analysis]
indexs_wet_days <- lapply(1:length(indexs_wet_days), function(i){z <- as.matrix(indexs_wet_days[[i]]); return(z)})
ndws_year_pixel <- unlist(lapply(1:length(years_analysis), function(k){
wetDays_year <- as.numeric(indexs_wet_days[[k]][which(indexs_wet_days[[k]][,'cellID']==pixelList[j]), 4:ncol(indexs_wet_days[[k]])])
wetDays <-watbal_loc[wetDays_year,]
ndws <- calc_wsdays(wetDays$ERATIO, season_ini=1, season_end=100, e_thresh=0.5)
return(ndws)
}))
NDWS <- watbal_loc[1, c('cellID', 'lon', 'lat')]
NDWS <- cbind(NDWS, t(ndws_year_pixel))
colnames(NDWS)[4:ncol(NDWS)] <- as.character(gsub(pattern='y', replacement='', years_analysis))
rownames(NDWS) <- 1:nrow(NDWS)
return(NDWS)
}
suppressMessages(library(compiler))
NDWSProcessCMP <- cmpfun(NDWSProcess)
suppressMessages(library(parallel))
NDWS <- mclapply2(1:ncells, FUN=NDWSProcessCMP)
NDWSProcessCMP
suppressMessages(library(parallel))
NDWS <- mclapply2(1:ncells, FUN=NDWSProcessCMP(j))
NDWS <- mclapply2(1:ncells, FUN=NDWSProcessCMP(j = j))
head(NDWSProcessCMP)
NDWS <- mclapply2(1:ncells, FUN=NDWSProcessCMP(j))
ncells
1:ncells
mclapply2
mclapply2(1:ncells, NDWSProcessCMP(j))
NDWS <- mclapply2(1:ncells, NDWSProcessCMP)
cat('*** 10. Estimate start of each growing season\n')
cat('*** 11. Estimate length of each growing season\n')
suppressMessages(library(tidyr))
suppressMessages(library(lubridate))
GSEASProcess <- function(j){ # By pixel
daysList <- Reduce(intersect, list(colnames(tmaxAll[,-c(1:3)]), colnames(tminAll[,-c(1:3)]),
colnames(precAll[,-c(1:3)]), colnames(dswrfAll[,-c(1:3)])))
out_all <- soil[which(soil$cellID==pixelList[j]), c('cellID', 'lon', 'lat')]
out_all <- do.call("rbind", replicate(length(daysList), out_all, simplify=FALSE))
out_all$SRAD <- as.numeric(dswrfAll[which(dswrfAll$cellID==pixelList[j]), match(daysList, colnames(dswrfAll))])
out_all$TMIN <- as.numeric(tminAll[which(tminAll$cellID==pixelList[j]), match(daysList, colnames(tminAll))])
out_all$TMAX <- as.numeric(tmaxAll[which(tmaxAll$cellID==pixelList[j]), match(daysList, colnames(tmaxAll))])
out_all$RAIN <- as.numeric(precAll[which(precAll$cellID==pixelList[j]), match(daysList, colnames(precAll))])
rownames(out_all) <- daysList
soilcp <- soil[which(soil$cellID==pixelList[j]), 'soilcp']
if(!is.na(soilcp)){
watbal_loc <- watbal_wrapper(out_all=out_all, soilcp=soilcp) # If we need more indexes are here
watbal_loc$TAV <- (watbal_loc$TMIN + watbal_loc$TMAX)/2
watbal_loc <- watbal_loc[,c('cellID', 'lon', 'lat', 'TAV', 'ERATIO')]
watbal_loc$GDAY <- ifelse(watbal_loc$TAV >= 6 & watbal_loc$ERATIO >= 0.35, yes=1, no=0)
### CONDITIONS TO HAVE IN ACCOUNT
# Length of growing season per year
# Start: 5-consecutive growing days.
# End: 12-consecutive non-growing days.
# Run process by year
lgp_year_pixel <- lapply(1:length(years_analysis), function(k){
# Subsetting by year
watbal_year <- watbal_loc[year(rownames(watbal_loc))==gsub(pattern='y', replacement='', years_analysis[k]),]
# Calculate sequences of growing and non-growing days within year
runsDF <- rle(watbal_year$GDAY)
runsDF <- data.frame(Lengths=runsDF$lengths, Condition=runsDF$values)
# Identify start and extension of each growing season during year
if(!sum(runsDF$Lengths[runsDF$Condition==1] < 5) == length(runsDF$Lengths[runsDF$Condition==1])){
LGP <- 0; LGP_seq <- 0
for(i in 1:nrow(runsDF)){
if(runsDF$Lengths[i] >= 5 & runsDF$Condition[i] == 1){
LGP <- LGP + 1
LGP_seq <- c(LGP_seq, LGP)
LGP <- 0
} else {
if(LGP_seq[length(LGP_seq)]==1){
if(runsDF$Lengths[i] >= 12 & runsDF$Condition[i] == 0){
LGP <- 0
LGP_seq <- c(LGP_seq, LGP)
} else {
LGP <- LGP + 1
LGP_seq <- c(LGP_seq, LGP)
LGP <- 0
}
} else {
LGP <- 0
LGP_seq <- c(LGP_seq, LGP)
}
}
}
LGP_seq <- c(LGP_seq, LGP)
LGP_seq <- LGP_seq[-c(1, length(LGP_seq))]
runsDF$gSeason <- LGP_seq; rm(i, LGP, LGP_seq)
LGP_seq <- as.list(split(which(runsDF$gSeason==1), cumsum(c(TRUE, diff(which(runsDF$gSeason==1))!=1))))
# Calculate start date and extension of each growing season by year and pixel
growingSeason <- lapply(1:length(LGP_seq), function(g){
LGP_ini <- sum(runsDF$Lengths[1:(min(LGP_seq[[g]])-1)]) + 1
LGP <- sum(runsDF$Lengths[LGP_seq[[g]]])
results <- data.frame(cellID=pixelList[j], year=gsub(pattern='y', replacement='', years_analysis[k]), gSeason=g, SLGP=LGP_ini, LGP=LGP)
return(results)
})
growingSeason <- do.call(rbind, growingSeason)
if(nrow(growingSeason)>2){
growingSeason <- growingSeason[rank(-growingSeason$LGP) %in% 1:2,]
growingSeason$gSeason <- rank(growingSeason$SLGP)
growingSeason <- growingSeason[order(growingSeason$gSeason),]
}
} else {
growingSeason <- data.frame(cellID = pixelList[j], year = gsub(pattern='y', replacement='', years_analysis[k]), gSeason = 1:2, SLGP = NA, LGP = NA)
}
return(growingSeason)
})
lgp_year_pixel <- do.call(rbind, lgp_year_pixel); rownames(lgp_year_pixel) <- 1:nrow(lgp_year_pixel)
##################################################################
# Verify start and ends of growing seasons by year
##################################################################
# test3 <- watbal_loc[year(rownames(watbal_loc))==1985,]
# test4 <- lgp_year_pixel[lgp_year_pixel$year==1985,]
# par(mfrow=c(1,2)); plot(test3$ERATIO, ty='l'); plot(test3$RAIN, ty='l')
# abline(v=test4$SLGP, col=2)
# Start of growing season vs growing season
# png('/home/hachicanoy/gSeason_vs_SLGP.png', width=8, height=8, pointsize=30, res=300, units='in')
# plot(lgp_year_pixel$gSeason, lgp_year_pixel$SLGP, pch=20, col=lgp_year_pixel$gSeason, xlab='Growing season', ylab='Start of growing season (day of year)')
# dev.off()
# png('/home/hachicanoy/gSeason_vs_LGP.png', width=8, height=8, pointsize=30, res=300, units='in')
# plot(lgp_year_pixel$gSeason, lgp_year_pixel$LGP, pch=20, col=lgp_year_pixel$gSeason, xlab='Growing season', ylab='Length of growing season (day of year)')
# dev.off()
##################################################################
SLGP <- lgp_year_pixel[,c('cellID', 'year', 'gSeason', 'SLGP')] %>% spread(year, SLGP)
LGP  <- lgp_year_pixel[,c('cellID', 'year', 'gSeason', 'LGP')] %>% spread(year, LGP)
matrices <- list(SLGP=SLGP, LGP=LGP)
return(matrices)
} else {
return(cat('It is probable that pixel:', pixelList[j], 'is a water source\n'))
}
}
suppressMessages(library(compiler))
GSEASProcessCMP <- cmpfun(GSEASProcess)
suppressMessages(library(dplyr))
suppressMessages(library(foreach))
suppressMessages(library(doMC))
suppressMessages(library(doMC))
GSEAS <- foreach(j=1:ncells) %dopar% {
GSEASProcessCMP(j)
}
