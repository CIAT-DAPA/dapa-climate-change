gcmstack <- stack(paste0(rcpDir, "/", gcmList, "/", period, "/", crop, "_suit.tif"))
uncertainties(gcmstack, oDir, crop, rcp, period)
}
}
}
src.dir <- "Z:/DATA/WP2/00_scripts"
bd <- "Z:/DATA/WP2/05_EcoCrop_runs"
iDir <- "Z:/DATA/WP2/05_EcoCrop_runs/outputs"
oDir <- "Z:/DATA/WP2/05_EcoCrop_runs/impacts"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
# rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
rcpLs <- c("rcp85")
periodLs <- c("2040_2069")
shpStudyArea <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_diss.shp"
shpStudyAreaRs <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_diss.asc"
shpSubLevel <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo.shp"
sh <- readShapePoly(shpSubLevel)
rs <- shpStudyAreaRs
library(raster);library(maptools);library(rgdal);library(sp)
src.dir <- "Z:/DATA/WP2/00_scripts"
bd <- "Z:/DATA/WP2/05_EcoCrop_runs"
iDir <- "Z:/DATA/WP2/05_EcoCrop_runs/outputs"
oDir <- "Z:/DATA/WP2/05_EcoCrop_runs/impacts"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
# rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
rcpLs <- c("rcp85")
periodLs <- c("2040_2069")
shpStudyArea <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_diss.shp"
shpStudyAreaRs <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_diss.asc"
shpSubLevel <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo.shp"
sh <- readShapePoly(shpSubLevel)
rs <- shpStudyAreaRs
#Source scripts and libraries
stop("no")
source(paste(src.dir,"/src/createMask.R",sep=""))
source(paste(src.dir,"/src/futureRuns.tmp.R",sep=""))
source(paste(src.dir,"/src/impacts.R",sep=""))
source(paste(src.dir,"/src/uncertainty.R",sep=""))
cat("Calculate impact metrics for subadministrative levels\n")
crop
crop <- cropLs[1]
impDir <- paste(bd, "/impact/impacts-", crop, sep="")
impDir
rcp <- rcpLs[1]
rcpDir <- paste0(iDir, "/", crop, "/analyses/runs-", rcp)
rcpDir
gls <- list.files(rcpDir, full.names = F, include.dirs = F)
period <- periodLs[1]
gcm <- gls[1]
cat("\tImpact StudyArea ", gcm, "\n")
od <- paste(bd, "/impact/impacts-", crop, "/", gcm, sep="")
r1 <- raster(paste0(iDir, "/", crop, "/analyses/runs/", crop, "_suit.tif"))
r2 <- raster(paste0(rcpDir, "/", gcm, "/", period, "/", crop, "_suit.tif"))
csr=r1
fsr=r2
shp=sh
oDir=od
res <- (csr@extent@xmax - csr@extent@xmin)/(csr@ncols) #Resolution
nPol <- length(shp@polygons)
nPol
omDir <- paste(oDir, "/country-metrics", sep=""); if (!file.exists(omDir)) {dir.create(omDir)}
p=1
cat("Pol", p, "\n")
cname <- shp@data$COUNTRY[p]
cname
pol <- shp@polygons[p] #extract single polygon
pol
sh <- SpatialPolygons(pol) #create SP object from extracted feature
rs <- createMask(sh, res) #create a raster from the SP object
rs
writeRaster(rs, "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_1.asc)
)
writeRaster(rs, "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_1.asc")
p=2
cat("Pol", p, "\n")
cname <- shp@data$COUNTRY[p]
cname
pol <- shp@polygons[p] #extract single polygon
sh <- SpatialPolygons(pol) #create SP object from extracted feature
rs <- createMask(sh, res) #create a raster from the SP object
writeRaster(rs, "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_2.asc")
########  Calculate impact metrics for subadministrative levels  ######
library(raster);library(maptools);library(rgdal);library(sp)
src.dir <- "Z:/DATA/WP2/00_scripts"
bd <- "Z:/DATA/WP2/05_EcoCrop_runs"
iDir <- "Z:/DATA/WP2/05_EcoCrop_runs/outputs"
oDir <- "Z:/DATA/WP2/05_EcoCrop_runs/impacts"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
# rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
rcpLs <- c("rcp85")
periodLs <- c("2040_2069")
shpStudyArea <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_diss.shp"
shpStudyAreaRs <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo"
shpSubLevel <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo.shp"
sh <- readShapePoly(shpSubLevel)
rs <- shpStudyAreaRs
#Source scripts and libraries
stop("no")
source(paste(src.dir,"/src/createMask.R",sep=""))
source(paste(src.dir,"/src/futureRuns.tmp.R",sep=""))
source(paste(src.dir,"/src/impacts.R",sep=""))
source(paste(src.dir,"/src/uncertainty.R",sep=""))
crop
impDir <- paste(bd, "/impact/impacts-", crop, sep="")
if (!file.exists(impDir)) {dir.create(impDir, recursive = T)}
rcp
gcm
od <- paste(bd, "/impact/impacts-", crop, "/", gcm, sep="")
if (!file.exists(od)) {dir.create(od)}
r1 <- raster(paste0(iDir, "/", crop, "/analyses/runs/", crop, "_suit.tif"))
r2 <- raster(paste0(rcpDir, "/", gcm, "/", period, "/", crop, "_suit.tif"))
pp <- iMetrix(r1,r2,sh,od,rs, chggrid=T, impact=T, classes=T)
########  Calculate impact metrics for subadministrative levels  ######
library(raster);library(maptools);library(rgdal);library(sp)
src.dir <- "Z:/DATA/WP2/00_scripts"
bd <- "Z:/DATA/WP2/05_EcoCrop_runs"
iDir <- "Z:/DATA/WP2/05_EcoCrop_runs/outputs"
oDir <- "Z:/DATA/WP2/05_EcoCrop_runs/impacts"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
# rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
rcpLs <- c("rcp85")
periodLs <- c("2040_2069")
shpStudyArea <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo_diss.shp"
shpStudyAreaRs <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo"
shpSubLevel <- "Z:/GEODATA/AMAZON/SHAPEFILES/Ecoregions/tnc_terrestial_ecoregions_napo.shp"
sh <- readShapePoly(shpSubLevel)
rs <- shpStudyAreaRs
#Source scripts and libraries
stop("no")
source(paste(src.dir,"/src/createMask.R",sep=""))
source(paste(src.dir,"/src/futureRuns.tmp.R",sep=""))
source(paste(src.dir,"/src/impacts.R",sep=""))
source(paste(src.dir,"/src/uncertainty.R",sep=""))
cat("Calculate impact metrics for subadministrative levels\n")
for(crop in cropLs){
impDir <- paste(bd, "/impact/impacts-", crop, sep="")
if (!file.exists(impDir)) {dir.create(impDir, recursive = T)}
for (rcp in rcpLs){
rcpDir <- paste0(iDir, "/", crop, "/analyses/runs-", rcp)
gls <- list.files(rcpDir, full.names = F, include.dirs = F)
for(period in periodLs){
if (!file.exists(paste(bd, "/impact/impacts-", crop, "/impacts-", rcp, "-", period, "-amz-sub.csv", sep=""))) {
for (gcm in gls) {
cat("\tImpact StudyArea ", gcm, "\n")
od <- paste(bd, "/impact/impacts-", crop, "/", gcm, sep="")
if (!file.exists(od)) {dir.create(od)}
r1 <- raster(paste0(iDir, "/", crop, "/analyses/runs/", crop, "_suit.tif"))
r2 <- raster(paste0(rcpDir, "/", gcm, "/", period, "/", crop, "_suit.tif"))
pp <- iMetrix(r1,r2,sh,od,rs, chggrid=T, impact=T, classes=T)
im <- cbind(GCM=rep(gcm,times=nrow(pp$IMPACT)), pp$IMPACT)
if (gcm == gls[1]) {
res.im <- im
} else {
res.im <- rbind(res.im, im)
}
rm(im) #; rm(cl)
}
write.csv(res.im, paste(bd, "/impact/impacts-", crop, "/impacts-", rcp, "-", period, "-amz-sub.csv", sep=""), quote=T, row.names=F)
cat("Calcs impact metrics for for subadministrative levels\n")
} else {cat("Calcs impact metrics for subadministrative levels done!\n")}
}
}
}
#Tomado de Antonio Pantoja (phyton)
#Analisis cambios futuro_presente
#################################################################################
require(raster);require(rgdal);require(maptools)
require(rasterVis)
#################################################################################
iDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/outputs"
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
id <- c("Maize", "Cassava", "Plantain", "Bean", "Rice")
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
# rcp <- "rcp45"
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
# period <- "2040_2069"
mask <- readOGR("D:/CIAT/Projects/lat_bmu/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
# Plot settings
zvalues <- seq(1, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen"))(length(zvalues)-1) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
for (rcp in rcpLs){
for (period in periodLs){
for (crop in cropLs){
cat(crop, rcp, period, "\n")
if(!file.exists(paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))){
current = raster(paste0(iDir, "/", crop, "/analyses/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
#plot(pieced_fextent)
writeRaster(pieced_fextent,paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))
}
}
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
plot <- setZ(stk_crop, id)
names(plot) <- id
tiff(paste(oDir, "/suitchg_", rcp, "-", period, ".tif", sep=""), width=1000, height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask)))
dev.off()
}
}
stk_crop[[1]]
plot(stk_crop[[1]])
zvalues <- seq(1, 5, 1) # Define limits
zvalues
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask)))
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
stats <- c("mean", "mean-bottom25p", "mean-top25p", "agreement", "sd")
rcp <- rcpLs[1]
period =periodLs [1]
period =periodLs[1]
stat=stats[1]
stk_crop <- stack(paste0(uDir, "/", stat, "_", cropLs, "_", rcp, "_", period, ".tif"))
plot(stk_crop)
stat=stats[4]
stk_crop <- stack(paste0(uDir, "/", stat, "_", cropLs, "_", rcp, "_", period, ".tif"))
plot(stk_crop)
stat=stats[5]
stk_crop <- stack(paste0(uDir, "/", stat, "_", cropLs, "_", rcp, "_", period, ".tif"))
plot(stk_crop)
if (stati == "agreement"){
zvalues <- seq(0, 16, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("yellow", "orange", "blue")) # Set new colors
} else if (stati == "sd"){
zvalues <- seq(0, 50, 5) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("white", "black")) # Set new colors
} else {
zvalues <- seq(0, 100, 10) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "white", "darkgreen")) # Set new colors
}
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
stati=stats[1]
if (stati == "agreement"){
zvalues <- seq(0, 16, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("yellow", "orange", "blue")) # Set new colors
} else if (stati == "sd"){
zvalues <- seq(0, 50, 5) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("white", "black")) # Set new colors
} else {
zvalues <- seq(0, 100, 10) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "white", "darkgreen")) # Set new colors
}
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask)))
# Plot uncertainty
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
stats <- c("mean", "mean-bottom25p", "mean-top25p", "agreement", "sd")
for (rcp in rcpLs){
for (period in periodLs){
for(stati in stats){
if (stati == "agreement"){
zvalues <- seq(0, 16, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("yellow", "orange", "blue")) # Set new colors
} else if (stati == "sd"){
zvalues <- seq(0, 50, 5) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("white", "black")) # Set new colors
} else {
zvalues <- seq(0, 100, 10) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "white", "darkgreen")) # Set new colors
}
stk_crop <- stack(paste0(uDir, "/", stati, "_", cropLs, "_", rcp, "_", period, ".tif"))
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
tiff(paste(oDir, "/" stati, "-", rcp, "-", period, ".tif", sep=""), width=1000, height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0(stati, " ", rcp, " ", period)) + layer(sp.polygons(mask)))
dev.off()
}
}
}
stati
if (stati == "agreement"){
zvalues <- seq(0, 16, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("yellow", "orange", "blue")) # Set new colors
} else if (stati == "sd"){
zvalues <- seq(0, 50, 5) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("white", "black")) # Set new colors
} else {
zvalues <- seq(0, 100, 10) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "white", "darkgreen")) # Set new colors
}
stk_crop <- stack(paste0(uDir, "/", stati, "_", cropLs, "_", rcp, "_", period, ".tif"))
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
tiff(paste(oDir, "/", stati, "-", rcp, "-", period, ".tif", sep=""), width=1000, height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0(stati, " ", rcp, " ", period)) + layer(sp.polygons(mask)))
dev.off()
stk_crop
plot(stk_crop[[1]])
zvalues
zvalues <- seq(0, 100, 10) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "white", "darkgreen")) # Set new colors
stk_crop <- stack(paste0(uDir, "/", stati, "_", cropLs, "_", rcp, "_", period, ".tif"))
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0(stati, " ", rcp, " ", period)) + layer(sp.polygons(mask)))
plot <- setZ(stk_crop, id)
names(plot) <- id
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0(stati, " ", rcp, " ", period)) + layer(sp.polygons(mask)))
#################################################################################
require(raster);require(rgdal);require(maptools)
require(rasterVis)
#################################################################################
iDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/outputs"
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
id <- c("Maize", "Cassava", "Plantain", "Bean", "Rice")
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
# rcp <- "rcp45"
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
# period <- "2040_2069"
mask <- readOGR("D:/CIAT/Projects/lat_bmu/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
current = raster(paste0(iDir, "/", crop, "/analyses/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
plot <- setZ(stk_crop, id)
names(plot) <- id
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask)))
#Tomado de Antonio Pantoja (phyton)
#Analisis cambios futuro_presente
#################################################################################
require(raster);require(rgdal);require(maptools)
require(rasterVis)
#################################################################################
iDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/outputs"
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
id <- c("Maize", "Cassava", "Plantain", "Bean", "Rice")
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
# rcp <- "rcp45"
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
# period <- "2040_2069"
mask <- readOGR("D:/CIAT/Projects/lat_bmu/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
for (rcp in rcpLs){
for (period in periodLs){
for (crop in cropLs){
cat(crop, rcp, period, "\n")
if(!file.exists(paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))){
current = raster(paste0(iDir, "/", crop, "/analyses/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
#plot(pieced_fextent)
writeRaster(pieced_fextent,paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))
}
}
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
plot <- setZ(stk_crop, id)
names(plot) <- id
tiff(paste(oDir, "/suitchg_", rcp, "-", period, ".tif", sep=""), width=1000, height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask)))
dev.off()
}
}
# Plot uncertainty
uDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/uncertainties"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice")
oDir <- "D:/CIAT/Projects/lat_bmu/05_EcoCrop_runs/impact"
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
stats <- c("mean", "mean-bottom25p", "mean-top25p", "agreement", "sd")
for (rcp in rcpLs){
for (period in periodLs){
for(stati in stats){
if (stati == "agreement"){
zvalues <- seq(0, 16, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("yellow", "orange", "blue")) # Set new colors
} else if (stati == "sd"){
zvalues <- seq(0, 50, 5) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("white", "black")) # Set new colors
} else {
zvalues <- seq(0, 100, 10) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "white", "darkgreen")) # Set new colors
}
stk_crop <- stack(paste0(uDir, "/", stati, "_", cropLs, "_", rcp, "_", period, ".tif"))
plot <- setZ(stk_crop, id)
names(plot) <- id
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
tiff(paste(oDir, "/", stati, "-", rcp, "-", period, ".tif", sep=""), width=1000, height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0(stati, " ", rcp, " ", period)) + layer(sp.polygons(mask)))
dev.off()
}
}
}
?ls
