mask_ctr <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
if(!file.exists(eDir)){dir.create(eDir, recursive = T)}
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
eDir <- "Z:/DATA/WP2/05_EcoCrop_runs/impact_col_workshop"
if(!file.exists(eDir)){dir.create(eDir, recursive = T)}
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
for (rcp in rcpLs){
for (period in periodLs){
for (crop in cropLs){
cat(crop, rcp, period, "\n")
if(!file.exists(paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))){
current = raster(paste0(iDir, "/", crop, "/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
#plot(pieced_fextent)
writeRaster(pieced_fextent,paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))
}
}
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
stk_crop_msk <- crop(stk_crop, mask_col)
plot <- setZ(stk_crop, id)
names(plot) <- id
tiff(paste(eDir, "/suitchg_", rcp, "-", period, ".tif", sep=""), width=150*length(cropLs), height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask_ctr, col = "red"))  + layer(sp.polygons(adm_lim_col, col = "gray")) + layer(sp.polygons(mask_caqueta, col = "red")) )
dev.off()
}
}
iDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/outputs"
uDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/uncertainties"
oDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/impact_col_workshop"
eDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/impact_col_workshop"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice", "cocoa", "sugar_cane", "panela_cane")
id <- c("Maize", "Cassava", "Plantain", " Beans", "Rice", "Cocoa", "Sugar Cane", "Panela Cane")
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
# rcp <- "rcp45"
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
# period <- "2040_2069"
mask <- readOGR("D:/CIAT/Projects/lat_bmu/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
mask_col <- extent(-80,-66,-5,5)
mask_caqueta <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/MGN_ADM_MPIO_GRAFICO.shp", layer="MGN_ADM_MPIO_GRAFICO")
adm_lim_col <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/COL1.shp", layer="COL1")
mask_ctr <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
if(!file.exists(eDir)){dir.create(eDir, recursive = T)}
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
for (rcp in rcpLs){
for (period in periodLs){
for (crop in cropLs){
cat(crop, rcp, period, "\n")
if(!file.exists(paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))){
current = raster(paste0(iDir, "/", crop, "/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
#plot(pieced_fextent)
writeRaster(pieced_fextent,paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))
}
}
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
stk_crop_msk <- crop(stk_crop, mask_col)
plot <- setZ(stk_crop, id)
names(plot) <- id
tiff(paste(eDir, "/suitchg_", rcp, "-", period, ".tif", sep=""), width=150*length(cropLs), height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask_ctr, col = "red"))  + layer(sp.polygons(adm_lim_col, col = "gray")) + layer(sp.polygons(mask_caqueta, col = "red")) )
dev.off()
}
}
oDir
iDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/outputs"
uDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/uncertainties"
oDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/impact_col_workshop"
eDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/impact_col_workshop"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice", "cocoa", "sugar_cane", "panela_cane")
id <- c("Maize", "Cassava", "Plantain", " Beans", "Rice", "Cocoa", "Sugar Cane", "Panela Cane")
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
# rcp <- "rcp45"
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
# period <- "2040_2069"
mask <- readOGR("D:/CIAT/Projects/lat_bmu/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
mask_col <- extent(-80,-66,-5,5)
mask_caqueta <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/MGN_ADM_MPIO_GRAFICO.shp", layer="MGN_ADM_MPIO_GRAFICO")
adm_lim_col <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/COL1.shp", layer="COL1")
mask_ctr <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
if(!file.exists(eDir)){dir.create(eDir, recursive = T)}
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
for (rcp in rcpLs){
for (period in periodLs){
for (crop in cropLs){
cat(crop, rcp, period, "\n")
if(!file.exists(paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))){
current = raster(paste0(iDir, "/", crop, "/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
#plot(pieced_fextent)
if(!file.exists(oDir, "/impacts-", crop)){dir.create(oDir, "/impacts-", crop, recursive = T)}
writeRaster(pieced_fextent,paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))
}
}
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
stk_crop_msk <- crop(stk_crop, mask_col)
plot <- setZ(stk_crop, id)
names(plot) <- id
tiff(paste(eDir, "/suitchg_", rcp, "-", period, ".tif", sep=""), width=150*length(cropLs), height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask_ctr, col = "red"))  + layer(sp.polygons(adm_lim_col, col = "gray")) + layer(sp.polygons(mask_caqueta, col = "red")) )
dev.off()
}
}
dir.create(paste0(oDir, "/impacts-", crop, recursive = T))
dir.create(paste0(oDir, "/impacts-", crop), recursive = T)
#################################################################################
require(raster);require(rgdal);require(maptools)
require(rasterVis)
#################################################################################
iDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/outputs"
uDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/uncertainties"
oDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/impact_col_workshop"
eDir <- "Z:/WORK_PACKAGES/WP2/05_EcoCrop_runs/impact_col_workshop"
cropLs <- c("maize_eitzinger_kai", "cassava", "plantain_reggata_german", "bean", "rice", "cocoa", "sugar_cane", "panela_cane")
id <- c("Maize", "Cassava", "Plantain", " Beans", "Rice", "Cocoa", "Sugar Cane", "Panela Cane")
rcpLs <- c("rcp26", "rcp45", "rcp60", "rcp85")
# rcp <- "rcp45"
periodLs <- c("2020_2049", "2040_2069", "2070_2099")
# period <- "2040_2069"
mask <- readOGR("D:/CIAT/Projects/lat_bmu/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
mask_col <- extent(-80,-66,-5,5)
mask_caqueta <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/MGN_ADM_MPIO_GRAFICO.shp", layer="MGN_ADM_MPIO_GRAFICO")
adm_lim_col <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/COL1.shp", layer="COL1")
mask_ctr <- readOGR("Z:/WORK_PACKAGES/WP2/00_zones/rg_poly_countries.shp", layer= "rg_poly_countries")
if(!file.exists(eDir)){dir.create(eDir, recursive = T)}
# Plot settings
zvalues <- seq(0, 5, 1) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("red", "orange", "yellow", "green", "darkgreen")) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
for (rcp in rcpLs){
for (period in periodLs){
for (crop in cropLs){
cat(crop, rcp, period, "\n")
if(!file.exists(paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))){
current = raster(paste0(iDir, "/", crop, "/runs/", crop, "_suit.tif", sep=""))
future = raster(paste0(uDir, "/mean_", crop, "_", rcp, "_", period,".tif", sep=""))
if (crop == "cassava"){
thr <- 94
} else if (crop == "cotton") {
thr <- 60
} else {
thr <- 50
}
#Analysis
outCon1 = ((current >= thr) & (future  <  thr)) #Areas nolong suitable (RED)
outCon1[!outCon1]=NA
outCon1[!is.na(outCon1)]=1
outCon2 = (current >= thr) & (future >= thr) & ((future - current) < 0) #Areas suitable but less suitable inthe fut? (ORANGE)
outCon2[!outCon2]=NA
outCon2[!is.na(outCon2)]=2
outCon3 = (current >= thr) & (future >= thr) & ((future - current) == 0) #Areas suitable and same suitability in the future (YELLOW)
outCon3[!outCon3]=NA
outCon3[!is.na(outCon3)]=3
outCon4  = ((current < thr) & (future >= thr)) #New Areas of suitability (LIGHT GREEN)
outCon4[!outCon4]=NA#Tells R to give all regions except specified region NA
outCon4[!is.na(outCon4)]=4 #Gives each region a value of 1
outCon5 = (current >= thr) & (future >= thr) & ((future - current) > 0) #Areas Suitable and more suitable in the fut (DARK GREEN)
outCon5[!outCon5]=NA
outCon5[!is.na(outCon5)]=5
###Merge Layers
pieced_fextent = merge(outCon1,outCon2,outCon3,outCon4,outCon5)
#plot(pieced_fextent)
if(!file.exists(paste0(oDir, "/impacts-", crop))){
dir.create(paste0(oDir, "/impacts-", crop), recursive = T)
}
writeRaster(pieced_fextent,paste0(oDir, "/impacts-", crop, "/suitchg_", rcp, "-", period, ".tif"))
}
}
stk_crop <- stack(paste0(oDir, "/impacts-", cropLs, "/suitchg_", rcp, "-", period, ".tif"))
stk_crop_msk <- crop(stk_crop, mask_col)
plot <- setZ(stk_crop, id)
names(plot) <- id
tiff(paste(eDir, "/suitchg_", rcp, "-", period, ".tif", sep=""), width=150*length(cropLs), height=400, pointsize=8, compression='lzw',res=100)
print(levelplot(plot, at = zvalues, scales = list(draw=FALSE),  xlab="", ylab="", par.settings = myTheme, colorkey = list(space = "bottom"), main=paste0("Suitability change ", rcp, " ", period)) + layer(sp.polygons(mask_ctr, col = "red"))  + layer(sp.polygons(adm_lim_col, col = "gray")) + layer(sp.polygons(mask_caqueta, col = "red")) )
dev.off()
}
}
gcmList    <- c("bcc_csm1_1","bcc_csm1_1_m","csiro_mk3_6_0","gfdl_cm3", "gfdl_esm2g","gfdl_esm2m","ipsl_cm5a_mr","miroc_esm", "miroc_esm_chem","miroc_miroc5","ncc_noresm1_m") # "mohc_hadgem2_es"
gcmList
gcmList    <- c("bcc_csm1_1",
"bcc_csm1_1_m",
"csiro_mk3_6_0",
"gfdl_cm3",
"ipsl_cm5a_lr",
"miroc_esm",
"miroc_esm_chem",
"miroc_miroc5",
"mohc_hadgem2_es",
"mri_cgcm3",
"ncc_noresm1_m",
"nimr_hadgem2_ao"
) # "mohc_hadgem2_es"
gcmList
countyList
require(raster)
require(rasterVis)
require(maptools)
require(rgdal)
require(raster)
require(rasterVis)
require(maptools)
require(rgdal)
rcpList <- c("rcp26", "rcp45", "rcp60","rcp85")
baseDir <- "C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/climate_data/dowscaled_30s"
perList <- c("2020_2049", "2040_2069")
varList <- c("prec", "tmin", "tmax")
seasons <- c("djf", "mam", "jja", "son")
id <- c("DJF 2030s", "MAM 2030s", "JJA 2030s", "SON 2030s", "DJF 2050s", "MAM 2050s", "JJA 2050s", "SON 2050s")
rcpList <- c("rcp26", "rcp45", "rcp60","rcp85")
baseDir <- "C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/climate_data/dowscaled_30s"
perList <- c("2020_2049", "2040_2069")
varList <- c("prec", "tmin", "tmax")
seasons <- c("djf", "mam", "jja", "son")
id <- c("DJF 2030s", "MAM 2030s", "JJA 2030s", "SON 2030s", "DJF 2050s", "MAM 2050s", "JJA 2050s", "SON 2050s")
rwd_mask <- readOGR("C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/administrative_boundaries/RWA_adm0.shp",
layer= "RWA_adm0")
rwd_mask_districts <- readOGR("C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/administrative_boundaries/RWA_districts.shp",
layer= "RWA_districts")
oDir <- "C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/climate_data/plots_ensemble_30s"
rcp <- rcpList[1]
var <- varList[1]
ensDir <- paste0(baseDir, "/", rcp, "/ensemble")
ensDir
baseDir <- "C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/climate_data/ensemble_30s"
ensDir <- paste0(baseDir, "/", rcp)
ensDir
stk <- stack()
for (period in perList){
stk <- stack(stk, stack(paste0(ensDir, "/", period, "/", var, "_", seasons, ".tif")))
}
stk
wclDir <- "C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/climate_data/worldclim_v1"
period <- periodList[1]
period
seasons <- seasonList[1]
seasons <- seasons[1]
season
seasons <- c("djf", "mam", "jja", "son")
season <- seasons[1]
season
rs_fut <- raster(paste0(ensDir, "/", period, "/", var, "_", season, ".tif"))
rs_fut
rs_wcl <- raster(paste0(wclDir, "/", var, "_", season, ".tif"))
rs_wcl
anom <- rs_fut / bsl - 1
anom <- rs_fut / rs_wcl - 1
anom
rs_fut
rs_wcl
rs_fut <- mask(crop(raster(paste0(ensDir, "/", period, "/", var, "_", season, ".tif")), extent(mask)), mask)
mask <- readOGR("C:/Users/cenavarro/Google Drive/CIAT/CIAT-Africa_Training/Rwanda_data/administrative_boundaries/RWA_adm0.shp",
layer= "RWA_adm0")
rs_fut <- mask(crop(raster(paste0(ensDir, "/", period, "/", var, "_", season, ".tif")), extent(mask)), mask)
rs_wcl <- mask(crop(raster(paste0(wclDir, "/", var, "_", season, ".tif")), extent(mask)), mask)
anom <- rs_fut / rs_wcl - 1
rs_fut
rs_wcl
rs_fut <- resample(rs_fut, rs_wcl)
rs_fut
anom <- rs_fut / rs_wcl - 1
anom
plot(anom)
rs_fut
rs_wcl
anom <- rs_fut / rs_wcl - 1
plot(anom*100)
var <- varList[2]
rs_fut <- mask(crop(raster(paste0(ensDir, "/", period, "/", var, "_", season, ".tif")), extent(mask)), mask)
rs_wcl <- mask(crop(raster(paste0(wclDir, "/", var, "_", season, ".tif")), extent(mask)), mask)
rs_fut
rs_wcl
plot(rs_fut)
plot(rs_wcl)
anom <- (rs_fut - rs_wcl)  / 10
rs_fut <- resample(rs_fut, rs_wcl)
anom <- (rs_fut - rs_wcl)  / 10
anom
plot(anom)
paste0(ensDir, "/", period, "/", var, "_", season, "_anom.tif")
## Calculate ensemble anomalies
for (rcp in rcpList) {
for (var in varList){
ensDir <- paste0(baseDir, "/", rcp)
for (period in perList){
for (season in seasons){
rs_fut <- mask(crop(raster(paste0(ensDir, "/", period, "/", var, "_", season, ".tif")), extent(mask)), mask)
rs_wcl <- mask(crop(raster(paste0(wclDir, "/", var, "_", season, ".tif")), extent(mask)), mask)
rs_fut <- resample(rs_fut, rs_wcl)
if (var == "prec"){
anom <- rs_fut / rs_wcl - 1
} else {
anom <- (rs_fut - rs_wcl)  / 10
}
writeRaster(anom, paste0(ensDir, "/", period, "/", var, "_", season, "_anom.tif"))
}
}
}
}
src.dir <- "D:/OneDrive - CGIAR/CIAT/Crops/EcoCrop-development/_scripts"
cropParamFile <- "D:/OneDrive - CGIAR/CIAT/Crops/EcoCrop-development/crop_parameters/crop-parameters-maize-bean-icc.csv"
cropDir <- "D:/OneDrive - CGIAR/CIAT/Crops/EcoCrop-development/outputs_maize_beans_icc"
cDir <- "D:/OneDrive - CGIAR/CIAT/Climate & Geodata/cmip5_downscaled/gtm_wcl"
source(paste(src.dir,"/src/EcoCrop-model_WCl.R",sep=""))
#Source scripts and libraries
#stop("no")
library(raster);library(maptools);library(rgdal);library(sp)
# Reading crop parameters from parameter file
cropPar <- read.csv(cropParamFile, header=T)
parNames <- paste(cropPar$X)
cropNames <- names(cropPar)[2:ncol(cropPar)]
cropPar <- as.data.frame(t(cropPar[,2:ncol(cropPar)]))
row.names(cropPar) <- 1:nrow(cropPar)
names(cropPar) <- parNames
cropPar <- cbind(Crop=cropNames, cropPar)
#number of crops
nTest <- nrow(cropPar) #Number of test into file crop parameters
n <- 1
testName <- paste(cropPar$Crop[n])  #Name of the tests
#Source scripts and libraries
#stop("no")
library(raster);library(maptools);library(rgdal);library(sp)
if (!file.exists(paste(cropDir, "/" , testName, "/runs/", testName, "_suit.tif", sep=""))) {
#Run principal function
cat(paste("Processing : ",  testName, "\n", sep=""))
eco <- suitCalc(climPath=cDir,
Gmin=cropPar$Gmin[n], #Minimum lenght of the growing season
Gmax=cropPar$Gmax[n], #Maximum lenght of the growing season
Tkmp=cropPar$Tkmp[n], #Killing temperature
Tmin=cropPar$Tmin[n], #Minimum temperature
Topmin=cropPar$Topmin[n], #Minimum optimum temperature
Topmax=cropPar$Topmax[n], #Maximum optimum temperature
Tmax=cropPar$Tmax[n], #Maximum temperature
Rmin=cropPar$Rmin[n], #Minimum precipitation
Ropmin=cropPar$Ropmin[n], #Minimum optimum precipitation
Ropmax=cropPar$Ropmax[n], #Maximum optimum precipitation
Rmax=cropPar$Rmax[n], #Maximum precipitation
outfolder=paste(cropDir, "/", testName, "/runs", sep=""),
#sowDat=sowDat,
#harDat=harDat,
cropname=paste(testName, sep=""),
ext="",
cropClimate=F
)
} else {
cat(paste("Processed : ",  testName, "\n", sep=""))
}
ext
n <- 1
testName <- paste(cropPar$Crop[n])  #Name of the tests
#Source scripts and libraries
#stop("no")
library(raster);library(maptools);library(rgdal);library(sp)
if (!file.exists(paste(cropDir, "/" , testName, "/runs/", testName, "_suit.tif", sep=""))) {
#Run principal function
cat(paste("Processing : ",  testName, "\n", sep=""))
eco <- suitCalc(climPath=cDir,
Gmin=cropPar$Gmin[n], #Minimum lenght of the growing season
Gmax=cropPar$Gmax[n], #Maximum lenght of the growing season
Tkmp=cropPar$Tkmp[n], #Killing temperature
Tmin=cropPar$Tmin[n], #Minimum temperature
Topmin=cropPar$Topmin[n], #Minimum optimum temperature
Topmax=cropPar$Topmax[n], #Maximum optimum temperature
Tmax=cropPar$Tmax[n], #Maximum temperature
Rmin=cropPar$Rmin[n], #Minimum precipitation
Ropmin=cropPar$Ropmin[n], #Minimum optimum precipitation
Ropmax=cropPar$Ropmax[n], #Maximum optimum precipitation
Rmax=cropPar$Rmax[n], #Maximum precipitation
outfolder=paste(cropDir, "/", testName, "/runs", sep=""),
#sowDat=sowDat,
#harDat=harDat,
cropname=paste(testName, sep=""),
ext=NA,
cropClimate=F
)
} else {
cat(paste("Processed : ",  testName, "\n", sep=""))
}
ext
ext=NA
ext
is.na(ext)
n <- 1
testName <- paste(cropPar$Crop[n])  #Name of the tests
#Source scripts and libraries
#stop("no")
library(raster);library(maptools);library(rgdal);library(sp)
if (!file.exists(paste(cropDir, "/" , testName, "/runs/", testName, "_suit.tif", sep=""))) {
#Run principal function
cat(paste("Processing : ",  testName, "\n", sep=""))
eco <- suitCalc(climPath=cDir,
Gmin=cropPar$Gmin[n], #Minimum lenght of the growing season
Gmax=cropPar$Gmax[n], #Maximum lenght of the growing season
Tkmp=cropPar$Tkmp[n], #Killing temperature
Tmin=cropPar$Tmin[n], #Minimum temperature
Topmin=cropPar$Topmin[n], #Minimum optimum temperature
Topmax=cropPar$Topmax[n], #Maximum optimum temperature
Tmax=cropPar$Tmax[n], #Maximum temperature
Rmin=cropPar$Rmin[n], #Minimum precipitation
Ropmin=cropPar$Ropmin[n], #Minimum optimum precipitation
Ropmax=cropPar$Ropmax[n], #Maximum optimum precipitation
Rmax=cropPar$Rmax[n], #Maximum precipitation
outfolder=paste(cropDir, "/", testName, "/runs", sep=""),
#sowDat=sowDat,
#harDat=harDat,
cropname=paste(testName, sep=""),
ext=NA,
cropClimate=F
)
} else {
cat(paste("Processed : ",  testName, "\n", sep=""))
}
